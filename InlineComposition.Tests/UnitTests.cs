using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;
using System.Reflection;

namespace InlineComposition.Tests;

public sealed class UnitTests {
    private const string GENERATED_SOURCE_HEAD = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations


        using InlineCompositionAttributes;

        namespace MyCode;
        """;

    private static string[] GenerateSourceText(string input, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics) {
        InlineCompositionGenerator generator = new();
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.RunGeneratorsAndUpdateCompilation(CreateCompilation(input), out outputCompilation, out diagnostics);

        GeneratorDriverRunResult runResult = driver.GetRunResult();
        GeneratorRunResult generatorResult = runResult.Results[0];
        return [.. generatorResult.GeneratedSources.Select((GeneratedSourceResult generatedSource) => generatedSource.SourceText.ToString())];


        static CSharpCompilation CreateCompilation(string source) {
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(source);
            PortableExecutableReference metadataReference = MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location);
            CSharpCompilationOptions compilationOptions = new(OutputKind.ConsoleApplication);

            return CSharpCompilation.Create("compilation", [syntaxTree], [metadataReference], compilationOptions);
        }
    }



    [Test]
    public async ValueTask AssemblyNameAndVersionMatch() {
        string assemblyName = typeof(InlineCompositionGenerator).Assembly.GetName().Name!;
        string assemblyVersion = typeof(InlineCompositionGenerator).Assembly.GetName().Version!.ToString(3);

        FieldInfo[] fields = typeof(Attributes).GetFields(BindingFlags.NonPublic | BindingFlags.Static);
        string name = (string)fields[0].GetValue(null)!;
        string version = (string)fields[1].GetValue(null)!;

        await Assert.That(name).IsEqualTo(assemblyName);
        await Assert.That(version).IsEqualTo(assemblyVersion);
    }


    #region type, field, property, event

    [Test]
    public async ValueTask Inline_TypeAsync() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public struct NestedStruct;

                /// <summary>
                /// asdf
                /// </summary>
                [SomeAttribute]
                private sealed record class Nested {
                    public int Number => 1;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public struct NestedStruct;


                /// <summary>
                /// asdf
                /// </summary>
                [SomeAttribute]
                private sealed record class Nested {
                    public int Number => 1;
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Field() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int myField = 5;

                private string asdf;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;


                private string asdf;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Property() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public bool A { get; private set; }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public bool A { get; private set; }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Event() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public event Action<byte> A;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public event Action<byte> A;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region head - Comments and BaseClasses

    [Test]
    public async ValueTask Inline_AttributeAndComment() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                /// <summary>
                /// Test comment with Attribute
                /// </summary>
                [Something]
                public bool A { get; private set; }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                /// <summary>
                /// Test comment with Attribute
                /// </summary>
                [Something]
                public bool A { get; private set; }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_BaseClassAndInterfaces() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test : MyBase, IA, IB;

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived : MyBase, IA, IB {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_BaseClassWithPrimaryConstructor() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test : MyBase(5);

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived : MyBase(5) {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region Method, Constructor, Finalizer

    [Test]
    public async ValueTask Inline_Method() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod() {
                    int ab = 17;
                }

                public int MethodExpression() => 23;

                public void MethodVoidExpression() => System.Console.WriteLine();

                public void IInterface.Something() => System.Console.WriteLine("");
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public void MyMethod() {
                    {
                    int ab = 17;
                    }
                }

                public int MethodExpression() {
                    {
                        return 23;
                    }
                }

                public void MethodVoidExpression() {
                    {
                        System.Console.WriteLine();
                    }
                }

                public void IInterface.Something() {
                    {
                        System.Console.WriteLine("");
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Static_Method() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public static void StaticMethod() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public static void StaticMethod() {
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Operator() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public static bool operator |(Test a, Test b) {
                    return true;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public static bool operator |(Test a, Test b) {
                    {
                    return true;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Extern_Method() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_internString")]
                private extern static ref string GetString(Test @this);
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_internString")]
                private extern static ref string GetString(Test @this);

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_MethodMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod() {
                    int ab = 17;
                }

                private void ExpressionMethod() => System.Console.WriteLine("Base");

                public static void StaticMethod() => System.Console.WriteLine("Base");
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod", Modifiers = "public")]
                private void MyMethodPartial() {
                    int methodTestPartial = 3;
                }

                [InlineMethod(MethodName = "ExpressionMethod", Modifiers = "public")]
                private void ExpressionMethodPartial() => System.Console.WriteLine("Derived");

                [InlineMethod(MethodName = "StaticMethod")]
                public static void StaticMethodPartial() => System.Console.WriteLine("Derived");
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod", Modifiers = "public")]
                public void MyMethod() {
                    {
                    int ab = 17;
                    }
                    {
                    int methodTestPartial = 3;
                    }
                }


                [InlineMethod(MethodName = "ExpressionMethod", Modifiers = "public")]
                public void ExpressionMethod() {
                    {
                        System.Console.WriteLine("Base");
                    }
                    {
                        System.Console.WriteLine("Derived");
                    }
                }


                [InlineMethod(MethodName = "StaticMethod")]
                public static void StaticMethod() {
                    {
                        System.Console.WriteLine("Base");
                    }
                    {
                        System.Console.WriteLine("Derived");
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_MethodOperatorMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public static bool operator |() => true;
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineMethod(MethodName = "operator |", Modifiers = "public static")]
                private static bool BarPartial() => false;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineMethod(MethodName = "operator |", Modifiers = "public static")]
                public static bool operator |() {
                    {
                        return true;
                    }
                    {
                        return false;
                    }
                }

            }

            """;
        await   Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_MethodMergePrepend() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod", Modifiers = "public", First = true)]
                private void MyMethodPartial() {
                    int methodTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod", Modifiers = "public", First = true)]
                public void MyMethod() {
                    {
                    int methodTestPartial = 3;
                    }
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Method_ParameterAnyOrder() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod1() {
                    int ab = 1;
                }

                public void MyMethod2() {
                    int ab = 2;
                }

                public void MyMethod3() {
                    int ab = 3;
                }

                public void MyMethod4() {
                    int ab = 4;
                }

                public void MyMethod5() {
                    int ab = 5;
                }

                public void MyMethod6() {
                    int ab = 6;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod1", Modifiers = "public", First = true)]
                private void MyMethodPartial1() {
                    int methodTestPartial = 1;
                }

                [InlineMethod(MethodName = "MyMethod2", First = true, Modifiers = "public")]
                private void MyMethodPartial2() {
                    int methodTestPartial = 2;
                }

                [InlineMethod(Modifiers = "public", MethodName = "MyMethod3", First = true)]
                private void MyMethodPartial3() {
                    int methodTestPartial = 3;
                }

                [InlineMethod(Modifiers = "public", First = true, MethodName = "MyMethod4")]
                private void MyMethodPartial4() {
                    int methodTestPartial = 4;
                }

                [InlineMethod(First = true, MethodName = "MyMethod5", Modifiers = "public")]
                private void MyMethodPartial5() {
                    int methodTestPartial = 5;
                }

                [InlineMethod(First = true, Modifiers = "public", MethodName = "MyMethod6")]
                private void MyMethodPartial6() {
                    int methodTestPartial = 6;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineMethod(MethodName = "MyMethod1", Modifiers = "public", First = true)]
                public void MyMethod1() {
                    {
                    int methodTestPartial = 1;
                    }
                    {
                    int ab = 1;
                    }
                }


                [InlineMethod(MethodName = "MyMethod2", First = true, Modifiers = "public")]
                public void MyMethod2() {
                    {
                    int methodTestPartial = 2;
                    }
                    {
                    int ab = 2;
                    }
                }


                [InlineMethod(Modifiers = "public", MethodName = "MyMethod3", First = true)]
                public void MyMethod3() {
                    {
                    int methodTestPartial = 3;
                    }
                    {
                    int ab = 3;
                    }
                }


                [InlineMethod(Modifiers = "public", First = true, MethodName = "MyMethod4")]
                public void MyMethod4() {
                    {
                    int methodTestPartial = 4;
                    }
                    {
                    int ab = 4;
                    }
                }


                [InlineMethod(First = true, MethodName = "MyMethod5", Modifiers = "public")]
                public void MyMethod5() {
                    {
                    int methodTestPartial = 5;
                    }
                    {
                    int ab = 5;
                    }
                }


                [InlineMethod(First = true, Modifiers = "public", MethodName = "MyMethod6")]
                public void MyMethod6() {
                    {
                    int methodTestPartial = 6;
                    }
                    {
                    int ab = 6;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_MethodOverload_DoesNotMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod() {
                    int ab = 17;
                }
            }

            [InlineBase]
            public sealed class Test2 {
                public void MyMethod(int q) {
                    int ab = 17;
                }
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public void MyMethod() {
                    {
                    int ab = 17;
                    }
                }

                public void MyMethod(int q) {
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }


    [Test]
    public async ValueTask Inline_Constructor() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public Derived() {
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_ConstructorWithThisCall() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }

                public Test(string message) : this() {
                    string myMessage = message;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public Derived() {
                    {
                    int ab = 17;
                    }
                }

                public Derived(string message) : this() {
                    {
                    string myMessage = message;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_ConstructorWithBaseCall() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }

                public Test(string message) : base() {
                    string myMessage = message;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public Derived() {
                    {
                    int ab = 17;
                    }
                }

                public Derived(string message) : base() {
                    {
                    string myMessage = message;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_ConstructorMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineConstructor(Modifiers = "public")]
                private void Constructor() {
                    int constructorTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineConstructor(Modifiers = "public")]
                public Derived() {
                    {
                    int ab = 17;
                    }
                    {
                    int constructorTestPartial = 3;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_ConstructorMergePrepend() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            [InlineBase(IgnoreInheritenceAndImplements = true)]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineConstructor(Modifiers = "public", First = true)]
                private void Constructor() {
                    int constructorTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineConstructor(Modifiers = "public", First = true)]
                public Derived() {
                    {
                    int constructorTestPartial = 3;
                    }
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_Constructor_ParameterOtherOrder() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            [InlineBase(IgnoreInheritenceAndImplements = true)]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineConstructor(First = true, Modifiers = "public")]
                private void Constructor() {
                    int constructorTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineConstructor(First = true, Modifiers = "public")]
                public Derived() {
                    {
                    int constructorTestPartial = 3;
                    }
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_ConstructorOverload_DoesNotMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [InlineBase]
            public sealed class Test2 {
                public Test(int q) {
                    int ab = 17;
                }
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public Derived() {
                    {
                    int ab = 17;
                    }
                }

                public Derived(int q) {
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_StaticConstructor_IsIgnored() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                static Test() { }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_PrimaryConstructor() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test(int prime);

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived(int prime) {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }


    [Test]
    public async ValueTask Inline_Finalizer() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                ~Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                ~Derived() {
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_FinalizerMerge() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                ~Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineFinalizer]
                private void Finalizer() {
                    int finalizeTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineFinalizer]
                ~Derived() {
                    {
                    int ab = 17;
                    }
                    {
                    int finalizeTestPartial = 3;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_FinalizerMergePrepend() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                ~Test() {
                    int ab = 17;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived {
                [InlineFinalizer(First = true)]
                private void Constructor() {
                    int finalizeTestPartial = 3;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [InlineFinalizer(First = true)]
                ~Derived() {
                    {
                    int finalizeTestPartial = 3;
                    }
                    {
                    int ab = 17;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region multiple bases, seperate inlines

    [Test]
    public async ValueTask MultipleBases() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int myField = 5;
            }

            [InlineBase]
            public sealed class Test2 {
                public int myField2 = 25;
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

                public int myField2 = 25;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_PrimaryConstructor_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test(int prime);

            [InlineBase]
            public sealed class Test2(int prime, string a);

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived(int prime, string a) {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_PrimaryConstructor_DifferentNamesGetNotMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test(int prime);

            [InlineBase]
            public sealed class Test2(int prime2, string a);

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived(int prime, int prime2, string a) {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ClassesAndInterfacesGetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            public class N;
            public interface IN;
            public class A;
            public interface IA;
            public interface IB;
            public interface IC;

            [InlineBase]
            public sealed class Test : A, IA, IB {
                public int myField = 5;
            }

            [InlineBase]
            public sealed class Test2 : A, IA, IC {
                public int myField2 = 25;
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived : N, IN;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived : A, IA, IB, IC {
                public int myField = 5;

                public int myField2 = 25;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ConflictsNonMethods_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int myField = 5;
            }

            [InlineBase]
            public sealed class Test2 {
                public int myField = 5;
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];
        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ConflictsMethods_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public void MyMethod() {
                    int ab = 17;
                }
            }

            [InlineBase]
            public sealed class Test2 {
                public void MyMethod() {
                    int cd = 283;
                }
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public void MyMethod() {
                    {
                    int ab = 17;
                    }
                    {
                    int cd = 283;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ConflictsExternMethods_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_internString")]
                private extern static ref string GetString(Test @this);
            }

            [InlineBase]
            public sealed class Test2 {
                [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_internString")]
                private extern static ref string GetString(Test @this);
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_internString")]
                private extern static ref string GetString(Test @this);

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ConflictsConstructors_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public Test() {
                    int ab = 17;
                }
            }

            [InlineBase]
            public sealed class Test2 {
                public Test2() {
                    int cd = 283;
                }
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public Derived() {
                    {
                    int ab = 17;
                    }
                    {
                    int cd = 283;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleBases_ConflictsFinalizer_GetMerged() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                ~Test() {
                    int ab = 17;
                }
            }

            [InlineBase]
            public sealed class Test2 {
                ~Test2() {
                    int cd = 283;
                }
            }

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                ~Derived() {
                    {
                    int ab = 17;
                    }
                    {
                    int cd = 283;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MultipleInlines() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int a = 1;
            }

            [InlineBase]
            public sealed class Test2 {
                public int b = 2;
            }

            [Inline<Test>]
            public sealed partial class Derived1;

            [Inline<Test2>]
            public sealed partial class Derived2;

            """;
        string[] sourceTexts = GenerateSourceText(input, out _, out _);
        (string sourceText1, string sourceText2) = (sourceTexts[^2], sourceTexts[^1]);

        const string expected1 = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived1 {
                public int a = 1;

            }

            """;
        await Assert.That(sourceText1).IsEqualTo(expected1);

        const string expected2 = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived2 {
                public int b = 2;

            }

            """;
        await Assert.That(sourceText2).IsEqualTo(expected2);
    }

    #endregion


    #region InlineBase Properties

    [Test]
    public async ValueTask MapBaseType() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase(MapBaseType = true)]
            public struct Test {
                public Test A => null!;
            }

            [InlineBase(MapBaseType = false]
            public struct Test2 {
                public Test2 B => null!;
            }

            [Inline<Test, Test2>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public Derived A => null!;

                public Test2 B => null!;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask IgnoreInheritenceAndImplements() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase(IgnoreInheritenceAndImplements = true)]
            public sealed class Test : ITest;

            [InlineBase]
            public sealed class Test2 : ITest2;

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived : ITest2 {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask InlineAttributes() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [TestAttribute]
            [InlineBase(InlineAttributes = true)]
            public struct Test;

            [TestAttribute]
            [InlineBase(InlineAttributes = false)]
            public struct Test2;

            [Inline<Test, Test2>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            [TestAttribute]
            public sealed partial class Derived {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region Generics

    [Test]
    public async ValueTask Generic() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test<T> {
                public T myField = default;

                public void MyMethod<U>() {
                    T variable1 = default;
                    U variable2 = default;
                }

                public T GenericParameter(System.Collections.Generic.List<T> list) { }

                public T Id(T t) => default!;
            }

            [Inline<Test<string>>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public string myField = default;

                public void MyMethod<U>() {
                    {
                    string variable1 = default;
                    U variable2 = default;
                    }
                }

                public string GenericParameter(System.Collections.Generic.List<string> list) {
                    {
                    }
                }

                public string Id(string t) {
                    {
                        return default!;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask MapBaseTypeGeneric() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase(MapBaseType = true)]
            public struct Test<T> : IEquatable<Test<T>> {
                public Test<T> A(Test<T> t, T t2) => null!;
            }

            [InlineBase(MapBaseType = false]
            public struct Test2<T> : IComparable<T> {
                public Test<T> B(Test<T> t, T t2) => null!;
            }

            [Inline<Test<string>, Test2<string>>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived : IEquatable<Derived>, IComparable<string> {
                public Derived A(Derived t, string t2) {
                    {
                        return null!;
                    }
                }

                public Test<string> B(Test<string> t, string t2) {
                    {
                        return null!;
                    }
                }

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region class, struct, record class, record struct

    [Test]
    public async ValueTask ClassWithClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask ClassWithStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask ClassWithRecordClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public class record Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask ClassWithRecordStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public struct record Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }


    [Test]
    public async ValueTask StructWithClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask StructWithStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask StructWithRecordClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed record class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask StructWithRecordStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed record struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }


    [Test]
    public async ValueTask RecordClassWithClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial record Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial record Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordClassWithStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial record class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial record class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordClassWithRecordClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public record class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial record class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial record class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordClassWithRecordStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public record struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public sealed partial record class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial record class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }


    [Test]
    public async ValueTask RecordStructWithClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public class Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial record struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial record struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordStructWithStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial record struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial record struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordStructWithRecordClass() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public record Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial record struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial record struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask RecordStructWithRecordStruct() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public record struct Test {
                public int myField = 5;
            }

            [Inline<Test>]
            public partial record struct Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial record struct Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    #region others (nested namespace and nested usings, InlineBase missing, NoInlineAttribute)

    [Test]
    public async ValueTask NestedNamespaceAndNestedUsings() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode {
                using A;
                namespace Nested {
                    using nested.A;

                    [Inline<Test>]
                    public sealed partial class Derived;

                    [InlineBase]
                    public sealed class Base;
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using nested.A;
            using A;
            using InlineCompositionAttributes;

            namespace MyCode.Nested;

            public sealed partial class Derived {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask Inline_WithoutInlineBase_DoesNotWork() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [Inline<Test>]
            public sealed partial class Derived;

            public sealed class Test {
                public int myField = 5;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask NoInline() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class Test {
                public int myField = 5;

                [NoInline]
                public void MyMethod() {
                    int ab = 5;
                }
            }

            [Inline<Test>]
            public sealed partial class Derived;

            """;
        string sourceText = GenerateSourceText(input, out _, out _)[^1];

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Derived {
                public int myField = 5;

            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    #endregion


    [Test]
    public async ValueTask EverythingCombined() {
        const string input = """
            using InlineCompositionAttributes;

            namespace MyCode;

            [InlineBase]
            public sealed class TestGeneric<T> {
                public int myField = 5;

                private string asdf;

                public event Action<T> A;

                public bool A { get; private set; }

                public Test() {
                    int ab = 17;
                }

                ~Test() {
                    string qw = "y";
                }

                public void MethodTest(string key, int value) {
                    int methodTest = 1;
                }

                [NoInline]
                private void PrivateMethod() { }
            }

            [InlineBase]
            public sealed class Test2 {
                public int myField = 5;

                public void MethodTest(string key, int value) {
                    int secondMethodTest = 1;
                }
            }

            [Inline<TestGeneric<nint>>]
            public sealed partial class Test {
                [InlineMethod(MethodName = "MethodTest", Modifiers = "public")]
                private void MethodTestPartial(string key, int value) {
                    int methodTestPartial = 3;
                }

                [InlineConstructor(Modifiers = "public", First = true)]
                private void A() {
                    bool a = true;
                }

                [InlineFinalizer(First = true)]
                private void B() {
                    bool b = false;
                }
            }

            [Inline<TestGeneric<string>, Test2>]
            public partial struct Derived;

            """;

        string[] sourceTexts = GenerateSourceText(input, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics);

        await Assert.That(diagnostics.IsEmpty).IsTrue();
        await Assert.That(outputCompilation).IsNotNull();


        (string sourceText1, string sourceText2) = (sourceTexts[^2], sourceTexts[^1]);

        const string expected1 = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public sealed partial class Test {
                public int myField = 5;


                private string asdf;


                public bool A { get; private set; }


                public event Action<nint> A;

                [InlineMethod(MethodName = "MethodTest", Modifiers = "public")]
                public void MethodTest(string key, int value) {
                    {
                    int methodTest = 1;
                    }
                    {
                    int methodTestPartial = 3;
                    }
                }


                [InlineConstructor(Modifiers = "public", First = true)]
                public Test() {
                    {
                    bool a = true;
                    }
                    {
                    int ab = 17;
                    }
                }


                [InlineFinalizer(First = true)]
                ~Test() {
                    {
                    bool b = false;
                    }
                    {
                    string qw = "y";
                    }
                }

            }

            """;
        await Assert.That(sourceText1).IsEqualTo(expected1);

        const string expected2 = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public partial struct Derived {
                public int myField = 5;


                private string asdf;


                public bool A { get; private set; }


                public event Action<string> A;

                public Derived() {
                    {
                    int ab = 17;
                    }
                }

                ~Derived() {
                    {
                    string qw = "y";
                    }
                }

                public void MethodTest(string key, int value) {
                    {
                    int methodTest = 1;
                    }
                    {
                    int secondMethodTest = 1;
                    }
                }

            }

            """;
        await Assert.That(sourceText2).IsEqualTo(expected2);
    }
}

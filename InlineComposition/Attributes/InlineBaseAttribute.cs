namespace InlineComposition;

public static partial class Attributes {
    public const string InlineBaseAttribute = $$"""
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations
    
    
        #if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES
        
        using System;
    
        namespace InlineCompositionAttributes;

        /// <summary>
        /// <para>Marks this class/struct as inlineable, so it can be listed in a <see cref="InlineAttribute{T1}"/> Attribute.</para>
        /// </summary>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class InlineBaseAttribute : Attribute {
            /// <summary>
            /// <para>If set all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct.</para>
            /// <para>e.g. if "Example" inlines "Test" with this option enabled, all occurrences of type "Test" inside class/struct "Test" will be mapped to "Example".</para>
            /// </summary>
            public bool MapBaseType { get; init; }

            /// <summary>
            /// If set the generator ignores the inherited class and implemented interfaces of this type.
            /// </summary>
            public bool IgnoreInheritenceAndImplements { get; init; }
        }

        #endif
    
        """;
}
